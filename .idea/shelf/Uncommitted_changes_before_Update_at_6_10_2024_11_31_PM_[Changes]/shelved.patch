Index: Prac_3/randoms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/randoms.py b/Prac_3/randoms.py
new file mode 100644
--- /dev/null	(date 1717545202470)
+++ b/Prac_3/randoms.py	(date 1717545202470)
@@ -0,0 +1,20 @@
+import random
+
+
+print(random.randint(5, 20))       # line1
+# On line 1 I saw 11
+# The smallest number I could have seen is "5" and the largest is "20"
+
+print(random.randrange(3, 10, 2))      # line2
+# On line 2 I saw 7
+# The smallest number I could have seen is "3" and the largest is "9"
+# Line 2 could not have produced a 4
+
+print(random.uniform(2.5, 5.5))      # line 3
+# On line 3 I saw 3.0535844346089744
+# The smallest number I could have seen is "2.5" and the largest is a number slightly <5.5 ( floating point)
+
+# Code to produce a random number between 1 and 100 inclusive this produces numbers a>=1 to b<=100
+print(random.randint(1, 100))
+
+
Index: Prac_week01/loops.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_week01/loops.py b/Prac_week01/loops.py
new file mode 100644
--- /dev/null	(date 1716814970907)
+++ b/Prac_week01/loops.py	(date 1716814970907)
@@ -0,0 +1,25 @@
+for i in range(1, 21, 2):
+    print(i, end=' ')
+print()
+# count in 10s from 0 to 100:
+print("count in 10s from 0 to 100:")
+for a in range(0, 101, 10):
+    print(a, end=' ')
+print()
+# count down from 20 to 1:
+print("count down from 20 to 1:")
+for b in range(20, 0, -1):
+    print(b, end=' ')
+print()
+# print n stars.
+print("print n stars.")
+for b in range(4):
+    print('*', end=" ")
+print()
+#  print n lines of increasing stars.
+print("print n lines of increasing stars.")
+for i in range(1, 5):
+    for j in range(i):
+        print("*", end=" ")
+    print()
+
Index: Prac_3/numbers.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/numbers.txt b/Prac_3/numbers.txt
new file mode 100644
--- /dev/null	(date 1718024833706)
+++ b/Prac_3/numbers.txt	(date 1718024833706)
@@ -0,0 +1,3 @@
+17
+42
+400
\ No newline at end of file
Index: Prac_3/capitalist_conrad.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/capitalist_conrad.py b/Prac_3/capitalist_conrad.py
new file mode 100644
--- /dev/null	(date 1717907888120)
+++ b/Prac_3/capitalist_conrad.py	(date 1717907888120)
@@ -0,0 +1,37 @@
+"""
+CP1404/CP5632 - Practical
+Capitalist Conrad wants a stock price simulator for a volatile stock.
+The price starts off at $10.00, and, at the end of every day there is
+a 50% chance it increases by 0 to 17.5%, and
+a 50% chance that it decreases by 0 to 5%.
+If the price rises above $100, or falls below $1.0, the program should end.
+The price should be displayed to the nearest cent (e.g. $33.59, not $33.5918232901)
+"""
+import random
+
+MAX_INCREASE = 0.175  # 17.5%
+MAX_DECREASE = 0.05  # 5%
+MIN_PRICE = 1.0
+MAX_PRICE = 100.0
+INITIAL_PRICE = 10.0
+price = INITIAL_PRICE
+out_file = open("capitalist_conrad.txt", 'w')
+print(f"Starting price: ${price:,.2f}", file=out_file)
+number_of_days = 0
+while MIN_PRICE <= price <= MAX_PRICE:
+    price_change = 0
+    number_of_days += 1       # A count for number of day
+    # generate a random integer of 1 or 2
+    # if it's 1, the price increases, otherwise it decreases
+    if random.randint(1, 2) == 1:
+        # generate a random floating-point number
+        # between 0 and MAX_INCREASE
+        price_change = random.uniform(0, MAX_INCREASE)
+    else:
+        # generate a random floating-point number
+        # between negative MAX_DECREASE and 0
+        price_change = random.uniform(-MAX_DECREASE, 0)
+
+    price *= (1 + price_change)
+    print(f"On day {number_of_days} price is: ${price:,.2f}", file=out_file)
+out_file.close()
Index: Prac_week01/broken_score.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_week01/broken_score.py b/Prac_week01/broken_score.py
new file mode 100644
--- /dev/null	(date 1716814248535)
+++ b/Prac_week01/broken_score.py	(date 1716814248535)
@@ -0,0 +1,18 @@
+"""
+CP1404/CP5632 - Practical
+Broken program to determine score status
+"""
+
+# TODO: Fix this!
+
+score = float(input("Enter score: "))
+if score < 0:
+    print("Invalid score")
+elif score < 50:
+    print("Bad")
+elif score < 90:
+    print("Passable")
+elif score <= 100:
+    print("Excellent")
+else:
+    print("Invalid score")
Index: Prac_week01/temperature.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_week01/temperature.py b/Prac_week01/temperature.py
new file mode 100644
--- /dev/null	(date 1716814041644)
+++ b/Prac_week01/temperature.py	(date 1716814041644)
@@ -0,0 +1,27 @@
+"""
+CP1404/CP5632 - Practical
+Pseudocode for temperature conversion
+"""
+
+MENU = """C - Convert Celsius to Fahrenheit
+F - Convert Fahrenheit to Celsius
+Q - Quit"""
+print(MENU)
+choice = input(">>> ").upper()
+while choice != "Q":
+    if choice == "C":
+        celsius = float(input("Celsius: "))
+        fahrenheit = celsius * 9.0 / 5 + 32
+        print(f"Result: {fahrenheit:.2f} C")
+    elif choice == "F":
+        # TODO: Write this section to convert F to C and display the result
+        # Hint: celsius = 5 / 9 * (fahrenheit - 32)
+        fahrenheit = float(input("Fahrenheit: "))
+        celsius = 5 / 9 * (fahrenheit - 32)
+        print(f"Result: {celsius:.2f} F")
+        # Remove the "pass" statement when you are done. It's a placeholder.
+    else:
+        print("Invalid option")
+    print(MENU)
+    choice = input(">>> ").upper()
+print("Thank you.")
Index: Prac_week01/shop_calculator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_week01/shop_calculator.py b/Prac_week01/shop_calculator.py
new file mode 100644
--- /dev/null	(date 1716813017609)
+++ b/Prac_week01/shop_calculator.py	(date 1716813017609)
@@ -0,0 +1,14 @@
+# Shop Calculator
+DISCOUNT_RATE = 0.9
+number_of_items = int(input("Number of items = "))
+price_of_items = []
+# setting a range for inputting items depending on the number of items entered
+for i in range(number_of_items):
+    price_of_item = float(input("Price of item = "))
+    price_of_items.append(price_of_item)
+total_price = sum(price_of_items)
+# Applying the discount rate 10%
+if total_price > 100:
+    total_price *= DISCOUNT_RATE
+# Printing the price of items after the discount
+print(f"The for {number_of_items} item(s) is {total_price:.2f}")
Index: Prac_week01/menus.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_week01/menus.py b/Prac_week01/menus.py
new file mode 100644
--- /dev/null	(date 1716813889318)
+++ b/Prac_week01/menus.py	(date 1716813889318)
@@ -0,0 +1,21 @@
+name = input("Enter name : ")
+
+print("(H)ello")
+print("(G)oodbye")
+print("(Q)uit")
+choice = input(">>> ").upper()
+while choice != 'Q':
+    if choice == 'H':
+        print(f"Hello", name)
+    elif choice == 'G':
+        print(f"Goodbye", name)
+    else:
+        print("Invalid choice")
+
+    print("(H)ello")
+    print("(G)oodbye")
+    print("(Q)uit")
+
+    choice = input(">>> ").upper()
+
+print("Finished.")
Index: Prac_2/class.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_2/class.py b/Prac_2/class.py
new file mode 100644
--- /dev/null	(date 1716886663510)
+++ b/Prac_2/class.py	(date 1716886663510)
@@ -0,0 +1,32 @@
+import random as rn
+
+length = int(input("length = "))
+
+width = rn.randint(4, length)
+print("Width = ", width)
+print("Area = ", length * width)
+
+def print_line():
+    print("*" * 20)
+
+
+print_line()
+
+# def print_grid(number_of_rows, number_of_columns):
+#     return "*"
+# print(print_grid(3, 7))
+
+def calculate_bmi(height, weight):
+    return weight / (height ** 2)
+print(calculate_bmi(10, 12))
+
+import random
+def main():
+    height = random.uniform(1, 2)
+    if calculate_bmi(height, 99) < 15:
+        print("Not considered overweight")
+def calculate_bmi(height, weight):
+    return weight / (height ** 2)
+
+main()
+
Index: Prac_2/try.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_2/try.py b/Prac_2/try.py
new file mode 100644
--- /dev/null	(date 1716888358286)
+++ b/Prac_2/try.py	(date 1716888358286)
@@ -0,0 +1,1 @@
+print(5 // 2)
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1717306829002)
+++ b/.idea/vcs.xml	(date 1717306829002)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Prac_2/password_stars.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>MIN_LENGTH = 8\r\n\r\n\r\ndef main():\r\n    password = get_password(MIN_LENGTH)\r\n    print_asterisks(password)\r\n\r\n\r\ndef get_password(min_length):\r\n    password = input(\"Password: \")\r\n    while len(password) < min_length:\r\n        print(\"Password must be at least\", min_length, \"characters long. \")\r\n        password = input(\"Password: \")\r\n    return password\r\n\r\n\r\ndef print_asterisks(password):\r\n    print('*' * len(password))\r\n\r\n\r\nmain()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_2/password_stars.py b/Prac_2/password_stars.py
--- a/Prac_2/password_stars.py	(revision 8a75fc1f9fb93e14be508d29388d33aaa63ea76f)
+++ b/Prac_2/password_stars.py	(date 1717543785868)
@@ -14,7 +14,7 @@
     return password
 
 
-def print_asterisks(password):
+def print_asterisks(    password):
     print('*' * len(password))
 
 
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1717488159430)
+++ b/.idea/.name	(date 1717488159430)
@@ -0,0 +1,1 @@
+password_stars.py
\ No newline at end of file
Index: Prac_3/read_from_disk.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/read_from_disk.py b/Prac_3/read_from_disk.py
new file mode 100644
--- /dev/null	(date 1717490385532)
+++ b/Prac_3/read_from_disk.py	(date 1717490385532)
@@ -0,0 +1,14 @@
+file_object = open("test_file.txt", 'r')
+# counter = 0
+# for line in file_object:
+#     counter = counter+1
+#     print(f"{counter}", ":", line)
+# # text = file_object.read()
+# file_object.close()
+# # print(text)
+# print("", line, "This is a new line")
+# line_text = file_object.read
+# print(line_text)
+for line in file_object:
+    if line.startswith('#'):
+        print(line)
Index: Prac_3/password_checker.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/password_checker.py b/Prac_3/password_checker.py
new file mode 100644
--- /dev/null	(date 1718003402709)
+++ b/Prac_3/password_checker.py	(date 1718003402709)
@@ -0,0 +1,61 @@
+"""
+CP1404/CP5632 - Practical
+Password checker "skeleton" code to help you get started
+"""
+
+MIN_LENGTH = 2
+MAX_LENGTH = 6
+IS_SPECIAL_CHARACTER_REQUIRED = False
+SPECIAL_CHARACTERS = "!@#$%^&*()_-=+`~,./'[]<>?{}|\\"
+
+
+def main():
+    """Program to get and check a user's password."""
+    print("Please enter a valid password")
+    print(f"Your password must be between {MIN_LENGTH} and {MAX_LENGTH} characters, and contain:")
+    print("\t1 or more uppercase characters")
+    print("\t1 or more lowercase characters")
+    print("\t1 or more numbers")
+    if IS_SPECIAL_CHARACTER_REQUIRED:
+        print("\tand 1 or more special characters: ", SPECIAL_CHARACTERS)
+    password = input("> ")
+    while not is_valid_password(password):
+        print("Invalid password!")
+        password = input("> ")
+    print(f"Your {len(password)}-character password is valid: {password}")
+
+
+def is_valid_password(password):
+    """Determine if the provided password is valid."""
+    # TODO: if length is wrong, return False
+    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:
+        return False
+    number_of_lower = 0
+    number_of_upper = 0
+    number_of_digit = 0
+    number_of_special = 0
+    for character in password:
+        if character.islower():
+            number_of_lower += 1
+        elif character.isupper():
+            number_of_upper += 1
+        elif character.isdigit():
+            number_of_digit += 1
+        elif character in SPECIAL_CHARACTERS:
+            number_of_special += 1
+        # TODO: count each kind of character (use str methods like isdigit)
+        pass
+
+    # TODO: if any of the 'normal' counts are zero, return False
+    if number_of_lower == 0 or number_of_upper == 0 or number_of_digit == 0:
+        return False
+    # TODO: if special characters are required, then check the count of those
+    if IS_SPECIAL_CHARACTER_REQUIRED and number_of_special == 0:
+        return False
+    # and return False if it's zero
+
+    # if we get here (without returning False), then the password must be valid
+    return True
+
+
+main()
Index: Prac_week01/class.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_week01/class.py b/Prac_week01/class.py
new file mode 100644
--- /dev/null	(date 1716283039946)
+++ b/Prac_week01/class.py	(date 1716283039946)
@@ -0,0 +1,9 @@
+total = 0
+number_of_people = 0
+age = int(input("Age: "))
+while age > 0:
+    total = total + age
+    number_of_people += 1
+    age = int(input("Age: "))
+    average = total / number_of_people
+    print(f"Average age of {total} people is {average}")
\ No newline at end of file
Index: .idea/Python CP1404.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Python CP1404.iml b/.idea/Python CP1404.iml
new file mode 100644
--- /dev/null	(date 1716282769506)
+++ b/.idea/Python CP1404.iml	(date 1716282769506)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1716282769525)
+++ b/.idea/modules.xml	(date 1716282769525)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Python CP1404.iml" filepath="$PROJECT_DIR$/.idea/Python CP1404.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1716283014624)
+++ b/.idea/misc.xml	(date 1716283014624)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12 (Python CP1404)" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (Python CP1404)" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: Prac_3/capitalist_conrad.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/capitalist_conrad.txt b/Prac_3/capitalist_conrad.txt
new file mode 100644
--- /dev/null	(date 1717907889987)
+++ b/Prac_3/capitalist_conrad.txt	(date 1717907889987)
@@ -0,0 +1,106 @@
+Starting price: $10.00
+On day 1 price is: $10.85
+On day 2 price is: $12.50
+On day 3 price is: $12.12
+On day 4 price is: $12.26
+On day 5 price is: $12.78
+On day 6 price is: $14.32
+On day 7 price is: $14.02
+On day 8 price is: $13.46
+On day 9 price is: $13.15
+On day 10 price is: $12.64
+On day 11 price is: $12.31
+On day 12 price is: $13.22
+On day 13 price is: $13.16
+On day 14 price is: $13.38
+On day 15 price is: $13.16
+On day 16 price is: $14.48
+On day 17 price is: $15.75
+On day 18 price is: $15.42
+On day 19 price is: $16.64
+On day 20 price is: $16.50
+On day 21 price is: $16.43
+On day 22 price is: $17.53
+On day 23 price is: $17.44
+On day 24 price is: $18.18
+On day 25 price is: $21.27
+On day 26 price is: $21.25
+On day 27 price is: $20.74
+On day 28 price is: $20.46
+On day 29 price is: $19.46
+On day 30 price is: $19.28
+On day 31 price is: $21.03
+On day 32 price is: $20.10
+On day 33 price is: $19.66
+On day 34 price is: $19.59
+On day 35 price is: $22.23
+On day 36 price is: $21.47
+On day 37 price is: $24.24
+On day 38 price is: $27.32
+On day 39 price is: $28.55
+On day 40 price is: $27.95
+On day 41 price is: $26.87
+On day 42 price is: $30.71
+On day 43 price is: $31.29
+On day 44 price is: $32.33
+On day 45 price is: $35.46
+On day 46 price is: $34.72
+On day 47 price is: $33.31
+On day 48 price is: $32.34
+On day 49 price is: $31.73
+On day 50 price is: $31.16
+On day 51 price is: $35.94
+On day 52 price is: $35.92
+On day 53 price is: $41.73
+On day 54 price is: $39.81
+On day 55 price is: $45.09
+On day 56 price is: $44.33
+On day 57 price is: $50.26
+On day 58 price is: $48.51
+On day 59 price is: $54.57
+On day 60 price is: $52.51
+On day 61 price is: $49.95
+On day 62 price is: $49.26
+On day 63 price is: $54.79
+On day 64 price is: $58.26
+On day 65 price is: $55.64
+On day 66 price is: $55.62
+On day 67 price is: $55.52
+On day 68 price is: $62.59
+On day 69 price is: $59.78
+On day 70 price is: $57.60
+On day 71 price is: $57.00
+On day 72 price is: $54.58
+On day 73 price is: $60.92
+On day 74 price is: $62.28
+On day 75 price is: $64.91
+On day 76 price is: $63.57
+On day 77 price is: $62.56
+On day 78 price is: $60.89
+On day 79 price is: $70.93
+On day 80 price is: $80.12
+On day 81 price is: $86.42
+On day 82 price is: $82.61
+On day 83 price is: $87.87
+On day 84 price is: $86.29
+On day 85 price is: $82.75
+On day 86 price is: $78.67
+On day 87 price is: $76.41
+On day 88 price is: $74.26
+On day 89 price is: $80.15
+On day 90 price is: $79.13
+On day 91 price is: $80.79
+On day 92 price is: $79.96
+On day 93 price is: $78.95
+On day 94 price is: $78.83
+On day 95 price is: $75.61
+On day 96 price is: $72.06
+On day 97 price is: $76.35
+On day 98 price is: $76.64
+On day 99 price is: $79.91
+On day 100 price is: $80.73
+On day 101 price is: $79.19
+On day 102 price is: $81.07
+On day 103 price is: $91.32
+On day 104 price is: $90.28
+On day 105 price is: $101.34
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1716282769549)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1716282769549)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: Prac_3/string_formatting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/string_formatting.py b/Prac_3/string_formatting.py
new file mode 100644
--- /dev/null	(date 1717503221823)
+++ b/Prac_3/string_formatting.py	(date 1717503221823)
@@ -0,0 +1,56 @@
+"""
+CP1404/CP5632 - Practical
+Various examples of using Python string formatting.
+(We prefer f-strings in this subject.)
+Want to read more about it?
+https://docs.python.org/3/library/string.html#formatstrings
+"""
+NUMBER = 2
+name = "Gibson L-5 CES"
+year = 1922
+cost = 16035.9
+
+# The 'old' manual way to format text with string concatenation (don't do this):
+print("My guitar: " + name + ", first made in " + str(year))
+
+# A better way - using str.format() (don't do this unless you need to):
+print("My guitar: {}, first made in {}".format(name, year))
+print("My guitar: {0}, first made in {1}".format(name, year))
+print("My {0} was first made in {1} (that's right, {1}!)".format(name, year))
+
+# And with f-string formatting, introduced in Python 3.6 (do this)
+print(f"My {name} was first made in {year} (that's right, {year}!)")
+
+# Formatting currency (grouping with comma, 2 decimal places):
+print("My {} would cost ${:,.2f}".format(name, cost))  # str.format version
+print(f"My {name} would cost ${cost:,.2f}")  # preferred f-string version
+
+# Aligning columns by using width after the :
+# This loop uses enumerate, which is useful when you want both the index and value
+numbers = [1, 19, 123, 456, -25]
+
+for i, number in enumerate(numbers, 1):
+    print(f"Number {i} is {number:5}")
+
+# TODO: Use f-string formatting to produce the output:
+# 1922 Gibson L-5 CES for about $16,036!
+print("TODO: Use f-string formatting to produce the output:")
+print(f"{year} {name} for about ${cost:,.0f}!")      # solution
+
+# TODO: Using a for loop with the range function and f-string formatting,
+print("TODO: Using a for loop with the range function and f-string formatting,")
+# produce the following right-aligned output (DO NOT use a list):
+# 2 ^ 0 is    1
+# 2 ^ 1 is    2
+# 2 ^ 2 is    4
+# 2 ^ 3 is    8
+# 2 ^ 4 is   16
+# 2 ^ 5 is   32
+# 2 ^ 6 is   64
+# 2 ^ 7 is  128
+# 2 ^ 8 is  256
+# 2 ^ 9 is  512
+# 2 ^10 is 1024
+for i in range(11):
+    result = NUMBER ** i
+    print(f"{NUMBER} ^ {i} is  {result:4}")
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1716282769658)
+++ b/.idea/.gitignore	(date 1716282769658)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: Prac_3/exceptions_to_complete.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/exceptions_to_complete.py b/Prac_3/exceptions_to_complete.py
new file mode 100644
--- /dev/null	(date 1717910203855)
+++ b/Prac_3/exceptions_to_complete.py	(date 1717910203855)
@@ -0,0 +1,13 @@
+"""
+CP1404/CP5632 - Practical
+Fill in the TODOs to complete the task
+"""
+
+is_finished = False
+while not is_finished:
+    try:
+        result = int(input("Enter a valid integer: "))
+        is_finished = True  # TODO: this line
+    except ValueError:  # TODO - add the exception you want to catch after except
+        print("Please enter a valid integer.")
+print("Valid result is:", result)
\ No newline at end of file
Index: Prac_week01/sales_bonus.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_week01/sales_bonus.py b/Prac_week01/sales_bonus.py
new file mode 100644
--- /dev/null	(date 1716814220828)
+++ b/Prac_week01/sales_bonus.py	(date 1716814220828)
@@ -0,0 +1,13 @@
+"""
+Program to calculate and display a user's bonus based on sales.
+If sales are under $1,000, the user gets a 10% bonus.
+If sales are $1,000 or over, the bonus is 15%.
+"""
+sales = float(input("Enter sales: $"))
+
+if sales < 1000:
+    lower_bonus = sales * 0.1
+    print('you get a 10% bonus', lower_bonus)
+else:
+    higher_bonus = sales * 0.15
+    print('you get a 15% bonus',higher_bonus)
Index: Prac_3/name.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/name.txt b/Prac_3/name.txt
new file mode 100644
--- /dev/null	(date 1718025526009)
+++ b/Prac_3/name.txt	(date 1718025526009)
@@ -0,0 +1,1 @@
+Estherine
\ No newline at end of file
Index: Prac_3/exceptions_demo.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/exceptions_demo.py b/Prac_3/exceptions_demo.py
new file mode 100644
--- /dev/null	(date 1717909635839)
+++ b/Prac_3/exceptions_demo.py	(date 1717909635839)
@@ -0,0 +1,26 @@
+"""
+CP1404/CP5632 - Practical
+Answer the following questions:
+1. When will a ValueError occur?
+2. When will a ZeroDivisionError occur?
+3. Could you change the code to avoid the possibility of a ZeroDivisionError?
+"""
+while True:
+    try:
+        numerator = int(input("Enter the numerator: "))
+        denominator = int(input("Enter the denominator: "))
+        if denominator == 0:
+            print("The denominator can't be 0")
+        else:
+            fraction = numerator / denominator
+            print(fraction)
+            break
+
+    except ValueError:
+        print("Numerator and denominator must be valid numbers!")
+# 1.ValueError will occur when the numerator/denominator entered is not an integer
+# either a floating value or a string
+# 2.ZeroDivisionError will occur when the denominator entered is 0
+# 3. Yes I can
+print("Finished.")
+
Index: Prac_3/files.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Prac_3/files.py b/Prac_3/files.py
new file mode 100644
--- /dev/null	(date 1718025518238)
+++ b/Prac_3/files.py	(date 1718025518238)
@@ -0,0 +1,20 @@
+user_name = input("Enter your name: ")
+out_file = open("name.txt", 'w')
+out_file.write(user_name)
+out_file.close()
+
+file_object = open("name.txt", 'r')
+user_name = file_object.read()
+file_object.close()
+
+with open("numbers.txt", 'r') as file_object:
+    first_number = int(file_object.readline())
+    second_number = int(file_object.readline())
+    result = first_number + second_number
+    print(result)
+
+total = 0
+with open("numbers.txt", 'r') as file_object:
+    for line in file_object:
+        total += int(line)
+    print(total)
